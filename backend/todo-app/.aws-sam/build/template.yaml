AWSTemplateFormatVersion: '2010-09-09'
Description: todo-app
Transform:
- AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: python3.12
    Environment:
      Variables:
        TABLE_NAME:
          Ref: Todos
        DYNAMODB_ENDPOINT_URL: http://host.docker.internal:8000
    Timeout: 10
    MemorySize: 128
Resources:
  Todos:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Todos
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: Email
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: EmailIndex
        KeySchema:
        - AttributeName: Email
          KeyType: HASH
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  registerUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/register_user.lambda_handler
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Todos
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Todos
      Events:
        RegisterUserApi:
          Type: Api
          Properties:
            Path: /user/register
            Method: POST
      CodeUri: registerUserFunction
    Metadata:
      SamResourceId: registerUserFunction
  getUserInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get_user_info.get_user_info_handler
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Todos
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: Todos
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/info
            Method: GET
      CodeUri: getUserInfoFunction
    Metadata:
      SamResourceId: getUserInfoFunction
  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/login.loginHandler
      Description: A simple example includes a HTTP post method to get one item by
        email and password from a DynamoDB table.
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: Todos
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login
            Method: POST
      CodeUri: loginFunction
    Metadata:
      SamResourceId: loginFunction
  registerTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/register_todo.register_todo_handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Todos
      Events:
        Api:
          Type: Api
          Properties:
            Path: /todo/register
            Method: POST
      CodeUri: registerTodoFunction
    Metadata:
      SamResourceId: registerTodoFunction
  getUserProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get_user_profile.get_user_handler
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: Todos
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/profile
            Method: GET
      CodeUri: getUserProfileFunction
    Metadata:
      SamResourceId: getUserProfileFunction
  updateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update_user.update_user_handler
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Todos
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Todos
      Events:
        UpdateUserApi:
          Type: Api
          Properties:
            Path: /user/update
            Method: PATCH
      CodeUri: updateUserFunction
    Metadata:
      SamResourceId: updateUserFunction
  deleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete_user.delete_user_handler
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Todos
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Todos
      Events:
        DeleteUserApi:
          Type: Api
          Properties:
            Path: /user/delete
            Method: DELETE
      CodeUri: deleteUserFunction
    Metadata:
      SamResourceId: deleteUserFunction
  getTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get_todo.get_todo_handler
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Todos
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: Todos
      Events:
        GetTodoApi:
          Type: Api
          Properties:
            Path: /todo
            Method: GET
      CodeUri: getTodoFunction
    Metadata:
      SamResourceId: getTodoFunction
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
