
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  todo-app

Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.12
    Environment:
      Variables:
        TABLE_NAME: !Ref Todos
        DYNAMODB_ENDPOINT_URL: "http://host.docker.internal:8000"
    Timeout: 10
    MemorySize: 128

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod 
      Cors:
        AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS, PATCH'"
        AllowHeaders: "'Content-Type,X-CSRF-TOKEN,Access-Control-Allow-Origin,Authorization'"
        AllowOrigin: "'*'"
        AllowCredentials: false

  Todos:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Todos
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: Email  # GSIのための属性定義
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH  # パーティションキー
        - AttributeName: SK
          KeyType: RANGE # ソートキー
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection: 
            ProjectionType: ALL 
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
            
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  #CORS対策
  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/options.handler
      Runtime: python3.12
      Events:
        CorsOptions:
          Type: Api
          Properties:
            Path: /api/{proxy+}
            Method: OPTIONS
            RestApiId: !Ref MyApi


  registerUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/register_user.lambda_handler
      Environment: 
        Variables:
          TABLE_NAME: !Ref Todos 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Todos
      Events:
        RegisterUserApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/user/register
            Method: POST


  getUserInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get_user_info.get_user_info_handler
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Environment:
        Variables:
          TABLE_NAME: !Ref Todos
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref Todos
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/user/info
            Method: GET


  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/login.loginHandler
      Description: A simple example includes a HTTP post method to get one item by email and password from a DynamoDB table.
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref Todos
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/login
            Method: POST


  registerTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/register_todo.register_todo_handler
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref Todos
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/todo/register
            Method: POST

  getUserProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get_user_profile.get_user_handler
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref Todos
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/user/profile
            Method: GET

  updateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update_user.update_user_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref Todos
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Todos
      Events:
        UpdateUserApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/user/update
            Method: PATCH

  deleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete_user.delete_user_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref Todos
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref Todos
      Events:
        DeleteUserApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/user/delete
            Method: DELETE

  getTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get_todo.get_todo_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref Todos
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref Todos
      Events:
        GetTodoApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/todo
            Method: GET

  updateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update_todo.update_todo_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref Todos
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref Todos
      Events:
        UpdateTodoApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/todo/update
            Method: PUT 

  taskCompletedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/task_completed.task_completed_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref Todos 
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref Todos 
      Events:
        TaskCompletedApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/todo/task/completed
            Method: PATCH

  deleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete_todo.delete_todo_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref Todos 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Todos
      Events:
        DeleteTodoApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/todo/delete
            Method: DELETE

  deleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete_task.delete_task_handler
      Environment:
        Variables:
          TABLE_NAME: !Ref Todos 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Todos
      Events:
        DeleteTaskApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /api/todo/task/delete
            Method: DELETE



Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
